{"version":3,"file":"extension.js","mappings":"+GAAA,eAEA,eAAOA,iBACN,aAAa,EAAAC,OAAOC,aAAa,CAChCC,MAAO,GACPC,YAAa,gBACbC,cAAeC,IAGd,IADgB,IAAIC,OADA,0BACYC,KAAKF,GAEpC,OAAOA,C,GAIX,C,UCdAG,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,SCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAO,EAAoBH,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,0FCpBA,eACA,SACA,SACA,QA0CA,SAASQ,EAAWC,EAAqBC,GACvC,MAAMC,EAAeC,EAAKC,KAAKC,UAAW,eAI1C,IAAIC,EAHSC,KAAKC,MAChBC,EAAGC,aAAaR,EAAe,iBAAiBS,YAElCX,GAAaM,KAG7B,OAAIA,EAAKM,QACPN,EAAOA,EACJF,KAAK,QACLS,MAAM,4BACNT,KAAKH,GACDK,GAIA,EAEX,CA3DA,oBAAyBQ,GACvBA,EAAQC,cAAcC,KACpB,EAAAC,SAASC,gBAAgB,kCAAkCrC,MAAOsC,IAEhE,MAAMC,EAAWD,EAAEE,OAGbpB,QAAsB,IAAAlB,gBAEtBuC,EAAW,GAAGF,KAAYnB,IAE5BA,GAEFQ,EAAGc,UAAUD,GAEbb,EAAGe,cACD,GAAGF,KAAYrB,QACfF,EAAW,UAAWE,IAQxBQ,EAAGe,cACD,GAAGF,aACHvB,EAAW,QAASE,IAGtB,EAAAnB,OAAO2C,uBACLxB,EAAgB,oBAGlB,EAAAnB,OAAO2C,uBAAuB,mB,IAItC,C","sources":["webpack://reactcomponentgenerator/./src/basicInput.ts","webpack://reactcomponentgenerator/external commonjs \"vscode\"","webpack://reactcomponentgenerator/external node-commonjs \"fs\"","webpack://reactcomponentgenerator/external node-commonjs \"path\"","webpack://reactcomponentgenerator/webpack/bootstrap","webpack://reactcomponentgenerator/./src/extension.ts"],"sourcesContent":["import { window } from 'vscode';\n\nexport async function showInputBox() {\n\treturn await window.showInputBox({\n\t\tvalue: '',\n\t\tplaceHolder: '컴포넌트의 이름을 입력!',\n\t\tvalidateInput: text => {\n\t\t\tconst reg: RegExp = /^[A-Z][A-Za-z0-9]{0,}$/;\n\t\t\tconst passReg = new RegExp(reg).test(text);\n\t\t\tif (!passReg) {\n\t\t\t\treturn text;\n\t\t\t}\n\t\t}\n\t});\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/** @format */\n\nimport { commands, ExtensionContext, window } from \"vscode\";\nimport { showInputBox } from \"./basicInput\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nexport function activate(context: ExtensionContext) {\n  context.subscriptions.push(\n    commands.registerCommand(\"reactcomponentgenerator.toggle\", async (e) => {\n      // 루트경로\n      const rootPath = e.fsPath;\n\n      // 컴포넌트 이름 입력받기\n      const componentName = await showInputBox();\n      // 파일 생성될 경로\n      const filePath = `${rootPath}/${componentName}`;\n\n      if (componentName) {\n        // 폴더생성\n        fs.mkdirSync(filePath);\n        // component.tsx파일 생성\n        fs.writeFileSync(\n          `${filePath}/${componentName}.tsx`,\n          addSnippet(\"reactts\", componentName)\n        );\n        // component.style.ts 파일 생성\n        // fs.writeFileSync(\n        //   `${filePath}/${componentName}.style.ts`,\n        //   addSnippet(\"style\", componentName)\n        // );\n        // index.ts파일 생성\n        fs.writeFileSync(\n          `${filePath}/index.ts`,\n          addSnippet(\"index\", componentName)\n        );\n\n        window.showInformationMessage(\n          componentName + \" 컴포넌트 생성 완료 !! \"\n        );\n      } else {\n        window.showInformationMessage(\"컴포넌트 이름을 입력해주세요.\");\n      }\n    })\n  );\n}\n\nfunction addSnippet(snippetType: string, componentName: string) {\n  const snippetsPath = path.join(__dirname, \"./snippets/\");\n  const json = JSON.parse(\n    fs.readFileSync(snippetsPath + \"snippets.json\").toString()\n  );\n  let body = json[snippetType].body;\n\n  // 만약 존재할 경우\n  if (body.length) {\n    body = body\n      .join(\"\\r\\n\")\n      .split(/(?<!\\\\)\\$componentName/gm)\n      .join(componentName);\n    return body;\n  }\n  // 존재하지 않을 경우\n  else {\n    return \"\";\n  }\n}\n"],"names":["async","window","showInputBox","value","placeHolder","validateInput","text","RegExp","test","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","addSnippet","snippetType","componentName","snippetsPath","path","join","__dirname","body","JSON","parse","fs","readFileSync","toString","length","split","context","subscriptions","push","commands","registerCommand","e","rootPath","fsPath","filePath","mkdirSync","writeFileSync","showInformationMessage"],"sourceRoot":""}